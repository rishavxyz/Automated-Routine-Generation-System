import React from 'react'
import Markdown from 'react-markdown'
import zip from '../components/Template.zip'
// screenshots
import s1 from '../components/ss1.jpg'
import s2 from '../components/ss2.jpg'
import s3 from '../components/img.jpeg'

const ss = [
    { name: 'Faculty file'
    , src: s1
    , alt: 'The columns'
    },

    { name: 'Course file'
    , src: s2
    , alt: 'The columns'
    },

    { name: 'Room file'
    , src: s3
    , alt: 'The columns'
    }
]

const md = `
## Upload Course Data
#### Uploading the Course Data File
Begin by uploading an Excel file named course_data.xlsx. This file should contain all the relevant information about the courses being offered. Ensure that the data is organized and formatted correctly for seamless processing by the system.

#### Providing Additional Details
After uploading the course data, provide specific details that will influence the scheduling:

- Holidays in a Week: Indicate the days that are considered holidays. These days will be excluded from the scheduling process.
- Class Period Duration: Specify the duration of each class period. This could be in minutes (e.g., 45 minutes, 60 minutes).
- Break Time: Define the duration of breaks between class periods.
These details are crucial for the system to generate an accurate and efficient slot preference table.

## Generate Slot Preference Table
#### Automated Generation
The system will automatically generate a slot preference table based on the provided course data and additional details. This table will outline potential time slots for the classes, ensuring that they fit within the specified constraints.

#### Customization via Drag and Drop
You have the flexibility to adjust the slots according to your preferences. Utilize the drag-and-drop functionality to rearrange the slots to better suit your requirements. This interactive feature allows for easy customization to match specific needs or preferences.

## Upload Additional Data Files
#### Upload Faculty File
Upload an Excel file containing the details of the faculty members. This file should include information such as faculty names, subjects they teach, availability, and any other relevant details.

#### Upload Sections File
Next, upload an Excel file that lists the different sections. Ensure that this file contains all necessary details, such as section names, student capacity, and any specific requirements for each section.

#### Upload Room File
Lastly, upload an Excel file with details about the rooms available for classes. Include information like room numbers, capacities, and any specific features or constraints of each room.

#### Additional Class Details
Provide further details about the classes, such as the number of classes per day. This helps the system to distribute the classes evenly throughout the schedule.

## Generate Routine Variants
#### Automated Routine Creation
Based on the uploaded files and provided details, the system will generate three variants of the routine. Each variant will be a complete schedule that meets the specified constraints and preferences.

#### Review and Selection
Carefully review the three routine variants generated by the system. Each variant will offer a different arrangement of classes, faculty, sections, and rooms, providing you with multiple options to choose from.

## Download the Preferred Routine
#### Choosing the Optimal Routine
Select the routine variant that best fits your needs. Consider factors such as convenience, balance, and any specific requirements or preferences you have.

#### Downloading the Routine
Once you have made your selection, download the chosen routine. The system provides the option to download the routine in a format that is easy to share and implement.
`

function Instructions() {
  return (
        <div class="space-y-6 py-6 !text-left">
            <section class="prose prose-neutral mx-auto">
                <h1>Instructions</h1>

                <p>The Project Routine Automation System is designed to simplify the process of scheduling and managing classes, faculty, sections, and rooms. This system ensures efficient and flexible routine creation with user-friendly interfaces for customization. Here are detailed instructions to navigate through the system effectively.</p>

                <p>Our system works by collecting four different data files in XLSX format <b>with predefined columns</b>. You need to upload all the four files and other details to generate a routine scuccessfully.</p>

                <p>Here is all the four files with predefined columns, you can download download the zip by clicking the button below and unzip it and fill each columns as you liking.</p>

                <a href={zip} class="px-6 py-3 bg-gray-800 text-white no-underline" download="SampleTemplate.zip">Download sample files</a>

                <p class="mt-8">Here are a picture of each XLSX files:</p>

                {ss.map(s => <>
                    <h4>{s.name}</h4>
                    <figure>
                        <img src={s.src} alt={s.alt} />
                        <figcaption>{s.alt}</figcaption>
                    </figure>
                </>)}

                <hr/>
                <p>Here is an in depth setp-by-step guide on how to generate a routine:</p>
                <Markdown>{md}</Markdown>
            </section>
        </div>
  )
}

export default Instructions
